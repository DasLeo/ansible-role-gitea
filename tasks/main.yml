---

- name: install git package
  apt:
    name: git
    state: present

- name: create gitea service user
  user:
    state: present
    name: "{{ gitea_user }}"
    shell: /bin/false
    system: yes
    create_home: yes
    comment: gitea service user,,,

- name: create gitea workdir
  file:
    path: "{{ gitea_directory }}"
    state: directory
    owner: "{{ gitea_user }}"
    group: "{{ gitea_user }}"
    mode: 0755

- name: check if Gitea Go binary exists
  stat:
    path: /usr/local/bin/gitea
  register: gitea_binary

- name: First install of Gitea binary
  block:
    - name: download Gitea binary
      get_url:
        url: "https://dl.gitea.io/gitea/{{ gitea_version }}/gitea-{{ gitea_version }}-linux-amd64"
        dest: /usr/local/bin/gitea-{{ gitea_version }}-linux-amd64
        owner: root
        mode: 0755

    - name: Creating symlink to Gitea binary {{ gitea_version }}
      file:
        src: /usr/local/bin/gitea-{{ gitea_version }}-linux-amd64
        dest: /usr/local/bin/gitea
        state: link
        force: yes
      notify: start gitea
  when: not gitea_binary.stat.exists

- name: Update installation of Gitea binary
  block:
    - name: determine current version
      set_fact:
        current_version: "{{ gitea_binary.stat.lnk_target | basename | regex_replace('^gitea-([^-]*)-linux-amd64$', '\\1') }}"
      when: gitea_binary.stat.islnk

    - name: Updating to newer Gitea binary {{ gitea_version }}
      get_url:
        url: "https://dl.gitea.io/gitea/{{ gitea_version }}/gitea-{{ gitea_version }}-linux-amd64"
        dest: /usr/local/bin/gitea-{{ gitea_version }}-linux-amd64
        owner: root
        mode: 0755
      when: gitea_version is version(current_version, '>') or not gitea_binary.stat.islnk

    - name: Creating symlink to Gitea binary {{ gitea_version }}
      file:
        src: /usr/local/bin/gitea-{{ gitea_version }}-linux-amd64
        dest: /usr/local/bin/gitea
        state: link
        force: yes
      notify: restart gitea
      when: gitea_version is version(current_version, '>') or not gitea_binary.stat.islnk

    - name: determine older versions
      find:
        path: /usr/local/bin/
        pattern: "gitea-*-linux-amd64"
        exclude: "gitea-{{ gitea_version }}-linux-amd64"
      register: old_versions
      when: gitea_binary.stat.islnk

    - name: Removing older Gitea binaries
      file:
        path: "/usr/local/bin/{{ item.path|basename }}"
        state: absent
      loop: "{{ old_versions.files }}"
  when: gitea_binary.stat.exists

- name: copy Gitea systemd service
  template:
    src: gitea-systemd.service.j2
    dest: /etc/systemd/system/gitea.service
    owner: root
    mode: 0644
  notify:
    - systemd daemon reload
    - restart gitea

- name: create Gitea config directory
  file:
    path: /etc/gitea
    state: directory

- name: check if Gitea config file exists
  stat:
    path: /etc/gitea/app.ini
  register: gitea_config_exists

- name: generate secret key on initial installation
  set_fact:
    gitea_secret_key: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits') }}"
  when: not gitea_config_exists.stat.exists

- name: read secrets and tokens from current config
  block:
    - name: read internal token from current config
      shell: awk -F "=" '/INTERNAL_TOKEN/ {print $2}' /etc/gitea/app.ini
      register: internal_token
      changed_when: false
      when: gitea_internal_token is not defined
    - name: set internal token from config as fact
      set_fact:
        gitea_internal_token: "{{ internal_token.stdout | trim }}"
      when: gitea_internal_token is not defined

    - name: read secret key from current config
      shell: awk -F "=" '/SECRET_KEY/ {print $2}' /etc/gitea/app.ini
      register: secret_key
      changed_when: false
      when: gitea_secret_key is not defined
    - name: set secret key from config as fact
      set_fact:
        gitea_secret_key: "{{ secret_key.stdout | trim }}"
      when: gitea_secret_key is not defined

    - name: read LFS JWT secret from current config
      shell: awk -F "=" '/LFS_JWT_SECRET/ {print $2}' /etc/gitea/app.ini
      register: lfs_jwt_secret
      changed_when: false
      when: gitea_lfs_jwt_secret is not defined
    - name: set LFS JWK secret from config as fact
      set_fact:
        gitea_lfs_jwt_secret: "{{ lfs_jwt_secret.stdout | trim }}"
      when: gitea_lfs_jwt_secret is not defined

    - name: read Oauth2 JWT secret from current config
      shell: awk -F "=" '/^JWT_SECRET/ {print $2}' /etc/gitea/app.ini
      register: oauth2_jwt_secret
      changed_when: false
      when: gitea_oauth2_jwt_secret is not defined
    - name: set Oauth2 JWT secret from config as fact
      set_fact:
        gitea_oauth2_jwt_secret: "{{ oauth2_jwt_secret.stdout | trim }}"
      when: gitea_oauth2_jwt_secret is not defined
  when: gitea_config_exists.stat.exists

- name: Create the app.ini file from the template
  template:
    src: gitea-app.ini.j2
    dest: /etc/gitea/app.ini
    owner: "{{ gitea_user }}"
    group: root
    mode: 0600
  notify: restart gitea

- name: start Gitea and generate admin user
  block:
    - name: reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: start gitea systemd service
      systemd:
        name: gitea
        state: started

    - name: "Wait for port {{ gitea_http_port }} to become open on the host"
      wait_for:
        port: "{{ gitea_http_port }}"

    - name: create initial Gitea admin user
      command: >
        /usr/local/bin/gitea admin create-user
        --config /etc/gitea/app.ini
        --name {{ gitea_admin_username }}
        --password {{ gitea_admin_password }}
        --email {{ gitea_admin_emailaddress }}
        --admin
      args:
        chdir: "{{ gitea_directory }}"
      environment:
        GITEA_WORK_DIR: "{{ gitea_directory }}"
        USER: "{{ gitea_user }}"
      become: yes
      become_user: "{{ gitea_user }}"
      changed_when: false
  when: not gitea_config_exists.stat.exists
