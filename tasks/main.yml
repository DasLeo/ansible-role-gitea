---

- name: install git package
  apt:
    name: git
    state: present

- name: create gitea service user
  user:
    state: present
    name: "{{ gitea_user }}"
    shell: /bin/false
    system: yes
    create_home: yes
    comment: gitea service user,,,

- name: create gitea workdir
  file:
    path: "{{ gitea_directory }}"
    state: directory
    owner: "{{ gitea_user }}"
    group: "{{ gitea_user }}"
    mode: 0755

- name: check if Gitea Go binary exists
  stat:
    path: /usr/local/bin/gitea
  register: gitea_binary

- name: First install of Gitea binary
  block:
    - name: download Gitea binary
      get_url:
        url: "https://dl.gitea.io/gitea/{{ gitea_version }}/gitea-{{ gitea_version }}-linux-amd64"
        dest: /usr/local/bin/gitea-{{ gitea_version }}-linux-amd64
        owner: root
        mode: 0755

    - name: Creating symlink to Gitea binary {{ gitea_version }}
      file:
        src: /usr/local/bin/gitea-{{ gitea_version }}-linux-amd64
        dest: /usr/local/bin/gitea
        state: link
        force: yes
      notify: restart gitea
  when: not gitea_binary.stat.exists

- name: Update installation of Gitea binary
  block:
    - name: determine current version
      set_fact:
        current_version: "{{ gitea_binary.stat.lnk_target | basename | regex_replace('^gitea-([^-]*)-linux-amd64$', '\\1') }}"
      when: gitea_binary.stat.islnk

    - name: Updating to newer Gitea binary {{ gitea_version }}
      get_url:
        url: "https://dl.gitea.io/gitea/{{ gitea_version }}/gitea-{{ gitea_version }}-linux-amd64"
        dest: /usr/local/bin/gitea-{{ gitea_version }}-linux-amd64
        owner: root
        mode: 0755
      when: gitea_version is version(current_version, '>') or not gitea_binary.stat.islnk

    - name: Creating symlink to Gitea binary {{ gitea_version }}
      file:
        src: /usr/local/bin/gitea-{{ gitea_version }}-linux-amd64
        dest: /usr/local/bin/gitea
        state: link
        force: yes
      notify: restart gitea
      when: gitea_version is version(current_version, '>') or not gitea_binary.stat.islnk

    - name: determine older versions
      find:
        path: /usr/local/bin/
        pattern: "gitea-*-linux-amd64"
        exclude: "gitea-{{ gitea_version }}-linux-amd64"
      register: old_versions
      when: gitea_binary.stat.islnk

    - name: Removing older Gitea binaries
      file:
        path: "/usr/local/bin/{{ item.path|basename }}"
        state: absent
      loop: "{{ old_versions.files }}"
  when: gitea_binary.stat.exists

- name: copy Gitea systemd service
  template:
    src: gitea-systemd.service.j2
    dest: /etc/systemd/system/gitea.service
    owner: root
    mode: 0644
  notify:
    - systemd daemon reload
    - restart gitea

- name: create Gitea config directory
  file:
    path: /etc/gitea
    state: directory

- name: check if Gitea config file exists
  stat:
    path: /etc/gitea/app.ini
  register: gitea_config_exists

- name: generate new config file with tokens
  block:

    - name: Create the app.ini file from the template
      template:
        src: gitea-app.ini.j2
        dest: /etc/gitea/app.ini
        owner: gitea
        group: root
        mode: 0600

    - name: create gitea workdir
      file:
        path: "{{ gitea_directory }}"
        state: directory
        owner: "{{ gitea_user }}"
        group: "{{ gitea_user }}"
        mode: 0755

    - name: reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: start gitea systemd service
      systemd:
        name: gitea
        state: started

    - name: "Wait for port {{ gitea_http_port }} to become open on the host"
      wait_for:
        port: "{{ gitea_http_port }}"

    - name: create initial admin user
      shell: "/usr/local/bin/gitea admin create-user --config /etc/gitea/app.ini --name {{ gitea_admin_username }} --password {{ gitea_admin_password }} --email {{ gitea_admin_emailaddress }} --admin"
      args:
        chdir: "{{ gitea_directory }}"
        executable: /bin/sh
      environment:
        GITEA_WORK_DIR: "{{ gitea_directory }}"
        USER: "{{ gitea_user }}"
      become: yes
      become_user: "{{ gitea_user }}"
  when: not gitea_config_exists.stat.exists

- name: Copy Gitea config to host
  template:
    src: gitea-app.ini.j2
    dest: /etc/gitea/app.ini
    owner: gitea
    group: root
    mode: 0600
  notify: restart gitea
  when: gitea_config_exists.stat.exists

- name: start Gitea systemd service
  systemd:
    name: gitea
    state: started
    enabled: yes
